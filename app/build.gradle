apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.softbankrobotics.fastdownward"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode getProperty("VERSION_CODE") as Integer
        versionName getProperty("VERSION_NAME") as String
        def buildId = getGitCommitHash()
        archivesBaseName = "fastdownward-$versionName-$buildId"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Configure Firebase
        def firebaseOptionsToResource = [
                fastDownwardFirebaseProjectID        : 'project_id',
                fastDownwardFirebaseGoogleAppID      : 'google_app_id',
                fastDownwardFirebaseWebClientID      : 'default_web_client_id',
                fastDownwardFirebaseGCMSenderID      : 'gcm_defaultSenderId',
                fastDownwardFirebaseGoogleAPIKey     : 'google_api_key',
                fastDownwardFirebaseCrashlyticsAPIKey: 'google_crash_reporting_api_key',
        ]
        Boolean withFirebase = true
        firebaseOptionsToResource.each { entry ->
            String optionValue = getOption(entry.key)
            if (optionValue.isEmpty()) {
                println "Firebase missing credential \"$entry.key\""
                withFirebase = false
            }
            resValue "string", entry.value, optionValue
        }
        println "WITH_FIREBASE=$withFirebase"
        buildConfigField "Boolean", "WITH_FIREBASE", withFirebase.toString()
        if (withFirebase) {
            apply plugin: 'com.google.firebase.firebase-perf'
            apply plugin: 'com.google.firebase.crashlytics'
        }
    }

    compileOptions {
        // Declares the need for Java 8 features.
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify our selection.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include(abis)

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.softbankrobotics.pddl:pddl-planning:1.4.1'
    implementation project(path: ':library')

    // Firebase
    implementation 'com.google.firebase:firebase-crashlytics:18.1.0'
    implementation 'com.google.firebase:firebase-perf:20.0.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}
