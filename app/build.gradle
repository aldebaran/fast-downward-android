apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.softbankrobotics.fastdownwardplanner"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                // Note that there are two `cmake` blocks,
                // see https://stackoverflow.com/questions/47370186/could-not-find-method-cppflags-arguments-for-arguments
                arguments "-DCMAKE_CROSSCOMPILING_EMULATOR=${new File("app/python-cmake-buildsystem/run_on_android.sh").absolutePath}",
                        "-DANDROID_ALLOW_UNDEFINED_SYMBOLS=ON",
                        "-DBUILD_SHARED_LIBS=ON",
                        "-DENABLE_CTYPES=OFF",
                        "-DENABLE_DECIMAL=OFF",
                        "-DENABLE_GRP=OFF",
                        "-DBUILD_EXTENSIONS_AS_BUILTIN=ON",
                        "-DINSTALL_MANUAL=OFF",
                        "-DINSTALL_TEST=OFF",
                        "-DINSTALL_DEVELOPMENT=OFF",
                        "-DWITH_DOC_STRINGS=OFF",
                        "-DWITH_THREAD=OFF"
            }
        }
    }

    compileOptions {
        // Declares the need for Java 8 features.
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            // Note that there are two `cmake` blocks,
            // see https://stackoverflow.com/questions/47370186/could-not-find-method-cppflags-arguments-for-arguments
            path file('CMakeLists.txt')
        }
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify our selection.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi-v7a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}
