// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        // Kotlin
        kotlin_version = '1.5.10'

        // NDK
        ndk_version = '21.3.6528147'

        // Compile preferred ABIs, or by default, respectively for VM, Desktop, Pepper
        abis = ((project.findProperty("ABIS") as String) ?: "x86;x86_64;armeabi-v7a").split(';')
        println "Configuring project for ABIS: $abis"
    }

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:0.10.1'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.6.1' // Crashlytics plugin
        classpath 'com.google.firebase:perf-plugin:1.4.0'  // Performance Monitoring plugin
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

static def getGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

/**
 * Gets a build option from the project's properties,
 * or otherwise from an environment variable.
 * @param optionName The name of the option to look for.
 * @param defaultValue The default value to provide if the option is not found.
 * @return The value of the option, or the default value otherwise.
 */
String getOption(String optionName, String defaultValue = "") {
    return getOptionAlternate(optionName, optionName, defaultValue)
}

/**
 * Gets a build option from the project's properties,
 * or otherwise from an environment variable.
 * @param optionName The name of the option to look for.
 * @param alternateOptionName An alternate name of the option check environment variable.
 * @param defaultValue The default value to provide if the option is not found.
 * @return The value of the option, or the default value otherwise.
 */
String getOptionAlternate(String optionName, String alternateOptionName, String defaultValue = "") {
    return project.findProperty(optionName)?.toString()
            ?: System.getenv(alternateOptionName)
            ?: defaultValue
}
